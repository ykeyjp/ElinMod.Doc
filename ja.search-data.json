{"/ElinMod.Doc/docs/":{"data":{"":" YK Framework データ解析 参考資料 "},"title":"Docs"},"/ElinMod.Doc/docs/analysis/":{"data":{"":"データ解析は、次の方針で行うのが一般的です。\nゲーム起動中のデータを解析して改変するデータや処理を特定する（インスペクターツールやデバッガーツール） プログラム（アセンブリ）を解析して改変するデータや処理を特定する（アセンブリ解析ツール） この2点の解析に必要なツールの準備については次の章（準備）で説明します。"},"title":"データ解析"},"/ElinMod.Doc/docs/analysis/preparation/":{"data":{"":"ElinなどのUnity製のゲームの解析にはUnity Explorerが大変便利です。\nElinではワークショップのModで簡単に導入できるようです。\nUnity Explorer by Elin Mod ここではオリジナルのUnity Explorerを導入する手順を記します。","bepinexのpluginsにコピー#BepInExのpluginsにコピー":"ZIPファイルの内容物を所定のフォルダーにコピーします。\nElinのインストール先のBepInExフォルダーに移動してください。\nWindowsでは以下のフォルダーです。\nC:\\Program Files (x86)\\Steam\\steamapps\\common\\Elin\\BepInEx ZIPファイルの内容物を次の構成になるようにコピーしてください。\nBepInEx plugins sinai-dev-UnityExplorer UnityExplorer.BIE6.Mono.dll UniverseLib.Mono.dll これだけで導入は完了です。\nゲーム起動中にF7キー（初期設定）でUnity Explorerを起動できます。","そのほかの解析用ツール#そのほかの解析用ツール":" ILSpy dnSpy どちらもC#のアセンブリを解析するのに役立つツールです。\nメンテナンスが続いているILSpyがオススメです。\nElinのインストールフォルダーにあるElin_Data\\Managed\\Elin.dllを起点に読み込むと良いでしょう。","パッケージをダウンロード#パッケージをダウンロード":" github:yukieiji/UnityExplorer GitHubのレポジトリを訪れ、Releasesから最新のパッケージをダウンロードします。\n対象はUnityExplorer.BepInEx6.Mono.zipです。\n間違えやすいものにUnityExplorer.BepInEx6.Unity.Mono.zipがありますが、こちらは今回使用しませんのでご注意ください。"},"title":"準備"},"/ElinMod.Doc/docs/analysis/step1/":{"data":{"":"ここでは簡単な例として所持しているアイテムの個数の改変を通して、データの操作について触れてみます。","まとめ#まとめ":"インスペクターでButtonGridを辿るなどの判断は経験則になってきますが、\nこのようにして特定のアイテムのデータを探し当て、データを改変することができました。\nアイテムやキャラクターにはどのようなデータ（値）があるのか、\nそれは単体で改変が可能なものなのか、それとも演算や計算によって参照されるデータなのか、\nなど、インスペクターだけでも様々な情報を得ることができます。\nぜひともご活用ください。","アイテム粗末な矢のデータを辿る#アイテム（粗末な矢）のデータを辿る":"画像のようにUI Inspector Resultsに結果が表示されたら、ButtonGridをクリックします。\n次にInspectorウィンドウが切り替わったら画像のComponentセクションのButtonGridをクリックします。\nその中に粗末な矢を参照しているThingがありますので、Inspectをクリックします。","インスペクターを起動する#インスペクターを起動する":"Unity Explorerを起動します。初期設定ではF7キーで起動します。\n起動すると画像のようなツールバーがウィンドウ上部に表示されます。\nツールバーからInspectorを選択します。\nポップアップしたInspectorウィンドウのMouse InspectからUIを選択します。","データ個数を改変する#データ（個数）を改変する":"ここまで来るとアイテムのデータを参照できるところまで来ています。\nリストの中からCard.Numを探します。\n元が1本なので1と表示されています。ここでは例に10に書き換えてみます。\n書き換えた後にApplyをクリックするとデータが反映されます。\n木箱の中の粗末な矢を確認すると10本に変わっています。","対象のアイテム粗末な矢#対象のアイテム（粗末な矢）":"今回はコンテナ（木箱）に入った粗末な矢を例にします。\n画像から木箱の中に1本の矢があることを確認してください。","調べたいもの粗末な矢を選択#調べたいもの（粗末な矢）を選択":"画像のように選択モードに切り替わるので、木箱の中の粗末な矢を左クリックします。 ⚠️ ※左クリックはアイテムを持つ動作と同じで矢を掴んでしまうので同じスロットに戻しておきましょう。 "},"title":"Step1:データの操作"},"/ElinMod.Doc/docs/analysis/step2/":{"data":{"":"UIの操作においてはGameObjectやComponentの深い沼に足を踏み入れることになるので、ここでは軽く触れる程度に留めておきます。\n⚠️ 解説用サンプルの選定中．．． "},"title":"Step2:UI要素の操作"},"/ElinMod.Doc/docs/devtool/":{"data":{"":"","modの導入#Modの導入":"次のリンクよりサブスクライブしてElinにYK DevToolを導入してください。\n※YK DevToolの利用にはYK Frameworkも必要です。\nYK Framework on Steam YK DevTool on Steam ","yk-devtoolとは#YK DevToolとは？":"Modの開発やさまざまなデータ検証をフォローするツールとして開発されました。\nキャラクターやアイテムのデータを編集したり、レシピ習得やアイテム生成を手助けする機能があります。\nYK Testing Toolの後継として開発されたModです。\nYK Testing Tool自体もMod開発における実験的Modでした。\nそこで得たノウハウをもとに、UI構成支援ModのYK Framework と開発支援ModのYK DevToolを開発しました。","メニュー#メニュー":"システムメニューやキャラ・アイテムをミドルクリックすると操作メニューが表示されます。\nシステムメニュー → ツール → 開発ツール メインウィンドウを表示するメニューです。\nシステムメニュー → ツール → レシピツール レシピ習得状況を編集するメニューです。\nシステムメニュー → ツール → アイテム生成ツール アイテムを生成するツールを表示するメニューです。","機能#機能":" Main開発ツール CharaEditキャラクターの編集 ThingEditアイテムの編集 BranchEdit拠点の編集 Teleportゾーン移動 RecipeToolレシピ習得状況の編集 ThingGeneratorアイテム生成ツール "},"title":"YK DevTool"},"/ElinMod.Doc/docs/devtool/edit-chara/":{"data":{"":"キャラクターをミドルクリックした時のコンテキストメニューにある「検査」から操作できます。\n自キャラクターだけでなく、ミドルクリックできるほかのキャラクターすべて編集対象になります。","スキル#スキル":"キャラクターのスキル構成を編集する機能です。\nLv0のスキルを獲得させると対象を削除する機能として働きます。\n※削除が機能するのは、獲得済みスキルのLvをゼロにするのではなく画面上部の獲得ボタンの方です。","一般#一般":"年齢などのフレーバー情報や、種族・職業など本来変更できないデータも編集できます。\n「専門+」はギルドで獲得できる追加の専門領域を指します。\nまたオマケで乳や遺伝子、卵、剥製、カードなどのトレジャーを生成する機能もあります。","行動#行動":"NPCの行動AIのスキル構成を編集できます。\nキャラクターに初期定義されたアクションは削除できません。","魔法#魔法":"キャラクターの魔法構成を編集する機能です。\nLv0の魔法を獲得させると対象を削除する機能として働きます。\n※削除が機能するのは、獲得済み魔法のLvをゼロにするのではなく画面上部の獲得ボタンの方です。"},"title":"キャラ編集"},"/ElinMod.Doc/docs/devtool/edit-thing/":{"data":{"":"インベントリーやコンテナーのアイテムをミドルクリックした時のコンテキストメニューにある「検査」から操作できます。\n自キャラクターの所持品だけでなく、インベントリー・コンテナー上でミドルクリックできるアイテムすべてが対象です。","エンチャント#エンチャント":"アイテムのエンチャントを編集できます。\nエンチャント獲得時のボーナス処理など本ツールで実行されない処理もありますのでご留意ください。\nLv0のエンチャントを獲得させると対象を削除する機能として働きます。\n※削除が機能するのは、獲得済みエンチャントのLvをゼロにするのではなく画面上部の獲得ボタンの方です。","スロット#スロット":"遠距離武器のスロットを編集できます。\nスロットが足りない場合は先に追加を実行してください。\n「空っぽ」はすべてのスロットを空の状態にします。\n「すべて削除」はスロット自体をすべて削除します。","一般#一般":"素材や品質、重さ、強化値などを編集できます。\nコンテナーは大きさも編集できます。\n収納箱のような特殊なコンテナーの大きさは編集できません。\nオマケで複製する機能もあります。\nユニークアイテムの複製は特定のタイミングで片方が消滅するなどの補正がゲーム仕様にあります。\n不要なアイテムは消滅ボタンで破壊することができます。\n開発中のModで追加したアイテムの処理などにご活用ください。","矢弾#矢弾":"遠距離武器に装填されている矢弾のステータスを編集します。","遺伝子#遺伝子":"遺伝子のDNA情報を編集できます。"},"title":"アイテム編集"},"/ElinMod.Doc/docs/devtool/main/":{"data":{"":"開発ツール（メインウィンドウ）はシステムメニューから操作できます。","ゾーン移動#ゾーン移動":"拠点や町、ネフィアに直接移動することができます。\nはじめて訪れるゾーンの場合、変な位置に入場する場合がありますのでご注意ください。\n別のゾーンに移動するかマップに入りなおしてください。","拠点編集#拠点編集":"現在入場中の拠点のステータスを編集する機能です。\nスキルやフィート、ポリシーなどを編集できます。\nゲーム仕様による獲得時のボーナスなど処理されないものがあるかもしれません。\n利用の際は留意してください。","簡単操作#簡単操作":"蘇生や通貨の獲得などちょっとしたアクションを実行できます。\nまた、デバッグフラグのON/OFFも可能で、神モードや神建築モードもコマンドを実行しなくても有効にできます。"},"title":"開発ツール"},"/ElinMod.Doc/docs/devtool/recipe-tool/":{"data":{"":"レシピツールはシステムメニューから操作できます。\nレシピの習得状態を個別に編集できます。\nチェックボックスは習得しているかどうかのボタンです。\n数値入力はレシピのLvを指します。"},"title":"レシピ習得"},"/ElinMod.Doc/docs/devtool/thing-generator/":{"data":{"":"アイテム生成ツールはシステムメニューから操作できます。\n生成する素材や個数などを設定し、アイテムのアイコンをクリックすると生成されます。\n素材を選択しない場合は仕様で設定されているデフォルト素材が使用されますが、通常プレイにおいて意図しない素材の場合もあるようです。\n対象アイテムリストはレシピ検索と異なり、レシピ習得状況に左右されずすべて表示されます。\n開発中のModで追加されるアイテムの生成などにお役立てください。"},"title":"アイテム生成ツール"},"/ElinMod.Doc/docs/framework/":{"data":{"":" ⚠️ YK Frameworkもまだまだ開発段階です。なるべく注意はしますがYK Frameworkの更新で製作したModが動作しなくなる可能性があります。ご注意ください。 ","yk-frameworkとは#YK Frameworkとは？":"ゲーム内のUI要素を再利用してMod独自のUI構築をサポートするライブラリです。\n公式にUI用のAPIが用意されているわけではないので、\n単純に目的に合ったUI要素を見つけて再利用するだけではレイアウトや表示の崩れを招きます。\nYK Frameworkではそうした調整処理を行い、汎用的に使えるパーツとして提供します。","マイルストーン#マイルストーン":"Elin（と言うよりUnity）のUIへの理解を深めるためのステップ案です。\n理解が進めば最終的にYK Frameworkを使用しなくても自身のModでUI構築が可能になることでしょう。\nStep 1 YK Frameworkの基本機能でUIの構築をお楽しみください。\nStep 2 YK Frameworkで生成されるUI要素のパラメーターを独自に弄ってみてください。\nStep 3 YK Frameworkに無い要素をゲーム内から見つけ、自身のModに組み込んでみてください。\nStep 4 自分なりのUtilityライブラリを作ってみてください。\nこの分野は研究的な側面が強いので、理解を深めるため車輪の再開発と厭わずチャレンジしてみてください。","使用に関しての注意事項#使用に関しての注意事項":"本ライブラリで使用される技術はゲーム解析のもと実現されており、ゲームのバージョンアップによる互換性の保証は一切ありません。\nある日突然表示が崩れたり、エラーを起こして処理が停止する可能性があります。\nこれらはライブラリに起因する問題ではありますが、ご利用は自己責任のもと行っていただき、代替処理の実装やワークショップのコメント欄で行われるフィードバックへの対応も各自ご対応ください。","開発コンセプト#開発コンセプト":"最小限の手間でそれなりのUIが作れる、をコンセプトに製作しています。\n凝った装飾や多機能な要素については提供の予定はありません。\nそういった高級なUIはご自身で研究し実現いただき、何らかの形でElin Mod界隈にフィードバックいただければ幸いです。"},"title":"YK Framework"},"/ElinMod.Doc/docs/framework/element/":{"data":{"":"とてもシンプルな例とともにUI要素の配置について説明します。 UIの構造はツリー状のような構造で表現されます。\n次の例では縦にテキストの「表示するテキスト１」「表示するテキスト２」と、ボタンの「ボタンのテキスト」が並ぶ構成です。\nText(\"表示するテキスト１\"); Text(\"表示するテキスト２\"); Button(\"ボタンのテキスト\", () =\u003e { Debug.Log(\"Pressed!\"); }); 構造を図で示すと次のようになります。\ngraph LR; Layer--\u003eTab; Tab--\u003eText1; Tab--\u003eText2; Tab--\u003eButton;順序は宣言した順になるので、ボタンなどのインタラクティブな要素で、ほかの要素を参照する処理が必要な場合は注意が必要です。\n次の例のようにあらかじめ変数textを宣言して対応します。\nText(\"表示するテキスト１\"); UIText = text; Button(\"ボタンのテキスト\", () =\u003e { /* 変数[text]をゴニョゴニョする */ }); text = Text(\"表示するテキスト２\"); 例に挙げたTextやButton意外にもたくさんのUI要素が用意されています。\nこれらはリファレンスで詳細を確認できます。"},"title":"UI要素の作成"},"/ElinMod.Doc/docs/framework/introduction/":{"data":{"":"","modのサブスクライブ#Modのサブスクライブ":"SteamワークショップからYK Frameworkを購読します。\nYK Framework on Steam ","実際にコードを書いてみる#実際にコードを書いてみる":"次のレイヤーの作成セクションで実際にUIを構築してみましょう。","開発ツールの参照設定#開発ツールの参照設定":"Unity,Visual Studio,Visual Studio Codeなどお使いの開発ツールの参照設定でYK FrameworkのDLL参照を追加してください。\nWindowの場合は下記のパスにダウンロードされています。\nC:\\Program Files (x86)\\Steam\\steamapps\\workshop\\content\\2135150\\3400020753\\YKFramework.dll "},"title":"導入"},"/ElinMod.Doc/docs/framework/layer/":{"data":{"":"まず始めにWindow（レイヤー）を定義します。\nレイヤーの生成時にオブジェクトを引数で渡すことができます。\n例えばキャラクターを参照するようなUIを作る場合にはCharaをプロパティに含めます。\nアイテムであればThingをプロパティに含めます。\npublic class CustomLayer : YKLayer\u003cThing\u003e { public override void OnLayout() { CreateTab\u003cCustomTab\u003e(\"タブ名\"._(\"Tab Name\"), \"タブに割り振るID\"); // 複数のタブが必要な場合は続けて宣言 CreateTab\u003cCustom2Tab\u003e(\"タブ名2\"._(\"Tab Name2\"), \"タブに割り振るID2\"); } } タブの宣言もレイヤーと似た構成のクラスとなります。\npublic class CustomTab : YKLayout\u003cThing\u003e { public override void OnLayout() { // UIの宣言 // レイヤー生成時に渡されるオブジェクトは this.Layer.Data で取得できます。 Thing thing = Layer.Data; } } YKLayoutを継承したクラスでUIを構築する処理を記述します。OnLayoutはその処理を記述するメソッドです。\n定義したレイヤーは次のコードで呼び出すことができます。\nYK.CreateLayer\u003cCustomLayer\u003e(thing); オブジェクトの参照が必要なければ次のような呼び出しも可能です。\nこの場合レイヤーの宣言時は object を割り当ててください。\npublic class CustomLayer : YKLayer\u003cobject\u003e {} YK.CreateLayer\u003cCustomLayer\u003e(); ここまでで定義された内容を箇条書きでまとめると次の通りです。\nCustomLayerと言うレイヤーを宣言。 CustomTabと言うタブを宣言。 YK.CreateLayerメソッドで定義したレイヤーの生成を命令。 サイズ640x480のウィンドウが生成される。 続いてUI要素の作成セクションでウィンドウに配置するパーツについて学んでみましょう。"},"title":"レイヤー作成"},"/ElinMod.Doc/docs/framework/refferences/":{"data":{"":"クラスライブラリとしてのリファレンスをまとめています。\n最新のバージョンに合わせて内容は更新しますが、更新が遅れる場合もあります。","その他#その他":" Spacerただの余白 ","ほかの要素を内包する要素#ほかの要素を内包する要素":" LayerUIの基礎となる要素 Vertical要素を縦に並べる Horizontal要素を横に並べる Grid折り返しが可能 ScrollスクロールできるVertical ","インタラクティブな要素#インタラクティブな要素":" InputTextキーボードの入力を受け付ける Buttonシンプルなボタン ToggleON/OFFのスイッチ DropDownいくつかの候補から選択 ","テキスト表示を行う要素#テキスト表示を行う要素":" Headerアイコンで装飾されたテキスト Topicラベルとデータを表示できる Text変哲もないテキスト "},"title":"リファレンス"},"/ElinMod.Doc/docs/framework/refferences/button/":{"data":{"":"Buttonはクリック可能な基本的なインタラクティブ要素です。\nUIButton YKLayout.Button(string text, Action action) ","サンプル#サンプル":" public override void OnLayout() { Button(\"ボタン１\", () =\u003e { Debug.Log(\"Pressed!\"); }); } ","引数#引数":" 引数 型 説明 text string ボタンに表示するテキスト action Action ボタンを押下した時のアクション "},"title":"Button"},"/ElinMod.Doc/docs/framework/refferences/dropdown/":{"data":{"":"ドロップダウン（プルダウン）要素を生成します。\nUIDropdown YKLayout.Dropdown(List\u003cstring\u003e? list = null, Action\u003cint\u003e? action = null, int? value = null) ","サンプル#サンプル":" public override void OnLayout() { Dropdown([\"選択肢１\", \"選択肢２\"], (idx) =\u003e {}, 1); } ","引数#引数":" 引数 型 説明 list List\u003cstring\u003e 選択肢のリスト action Action\u003cint\u003e 項目を変更する度に呼ばれるアクション value int 初期インデックス "},"title":"Dropdown"},"/ElinMod.Doc/docs/framework/refferences/grid/":{"data":{"":"左から右に要素を並べるレイアウトを生成します。\nHorizontalとの違いは規定の個数以上は折り返して下に配置されることです。\n行と列のある格子状のレイアウトを表現できます。\nGridはYKLayoutを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nYKGrid YKLayout.Grid() ","サンプル#サンプル":" public override void OnLayout() { var group = Grid(); } ","引数#引数":" 引数 型 説明 なし "},"title":"Grid"},"/ElinMod.Doc/docs/framework/refferences/header/":{"data":{"":"装飾されたテキストを生成します。\nUIItem YKLayout.Header(string text, Sprite? sprite = null) UIItem YKLayout.HeaderCard(string text, Sprite? sprite = null) UIItem YKLayout.HeaderSmall(string text, Sprite? sprite = null) ","サンプル#サンプル":" public override void OnLayout() { Header(\"ヘッダー１\"); } ","引数#引数":" 引数 型 説明 text string テキスト sprite Sprite テキストの頭に付けるアイコン "},"title":"Header"},"/ElinMod.Doc/docs/framework/refferences/horizontal/":{"data":{"":"左から右に要素を並べるレイアウトを生成します。\nHorizontalはYKLayoutを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nYKHorizontal YKLayout.Horizontal() ","サンプル#サンプル":" public override void OnLayout() { var group = Horizontal(); } ","引数#引数":" 引数 型 説明 なし "},"title":"Horizontal"},"/ElinMod.Doc/docs/framework/refferences/inputtext/":{"data":{"":"キーボードの入力を受け付けるインタラクティブ要素を生成します。\nUIInputText YKLayout.InputText(string text, Action\u003cint\u003e? onInput = null) ","サンプル#サンプル":" public override void OnLayout() { InputText(\"test\", (valueInt) =\u003e { Debug.Log(valueInt); }); } ","引数#引数":" 引数 型 説明 value string 初期データ onchange Action\u003cint\u003e 値が変更される度に呼び出されるアクション "},"title":"InputText"},"/ElinMod.Doc/docs/framework/refferences/layer/":{"data":{"":"Elinのプログラムにおいて、本来LayerとWindowは別々の機能を持つオブジェクトですが、\n本フレームワークではUIの構築を簡素化するため、Layerに１つのWindowを内包する構成で生成しています。\nレイヤーを定義する際にいくつかの上書き可能なオプションがあります。","サンプル#サンプル":" public class CustomLayer : YKLayer\u003cThing\u003e { public override void OnLayout() { CreateTab\u003cCustomTab\u003e(\"タブ名\"._(\"Tab Name\"), \"タブに割り振るID\"); } // ウィンドウのデフォルトのタイトル（タブ生成時にタブの名称で置き換えられる） public override string Title { get; } = \"ウィンドウ\"._(\"Window\"); // ウィンドウのサイズを宣言（デフォルトは 640x480） public override Rect Bound { get; } = new Rect(0, 0, 640, 480); } "},"title":"Layer"},"/ElinMod.Doc/docs/framework/refferences/scroll/":{"data":{"":"Verticalと同様に要素を縦に積み上げる（ぶら下げる？）レイアウトを生成します。\nScrollはスクロール可能な要素で、高さが上限に達するとスクロールバーが表示され、マウスホイールでスクロールが可能になります。\nScrollはYKLayoutを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nYKScroll YKLayout.Scroll() ","サンプル#サンプル":" public override void OnLayout() { var group = Scroll(); } ","引数#引数":" 引数 型 説明 なし "},"title":"Scroll"},"/ElinMod.Doc/docs/framework/refferences/spacer/":{"data":{"":"何も表示されない要素を生成します。\n要素間の余白作りに使用します。\nUIHost\u003cLayoutElement\u003e LayoutBase.Spacer(int height, int width = 1) ","サンプル#サンプル":" public override void OnLayout() { Spacer(50); } ","引数#引数":" 引数 型 説明 height int 縦方向のサイズ width int 横方向のサイズ "},"title":"Spacer"},"/ElinMod.Doc/docs/framework/refferences/text/":{"data":{"":"装飾されていないテキストを生成します。\nUIText YKLayout.Text(string text, FontColor color = FontColor.DontChange) UIText YKLayout.TextLong(string text, FontColor color = FontColor.DontChange) UIText YKLayout.TextMedium(string text, FontColor color = FontColor.DontChange) UIText YKLayout.TextSmall(string text, FontColor color = FontColor.DontChange) UIText YKLayout.TextFlavor(string text, FontColor color = FontColor.DontChange) ","サンプル#サンプル":" public override void OnLayout() { Text(\"テキスト１\"); } ","引数#引数":" 引数 型 説明 text string テキスト color FontColor 色 "},"title":"Text"},"/ElinMod.Doc/docs/framework/refferences/toggle/":{"data":{"":"ON/OFFを切り替えるインタラクティブ要素を生成します。\nUIButton YKLayout.Toggle(string text, bool isOn = false, Action\u003cbool\u003e? onClick = null) ","サンプル#サンプル":" public override void OnLayout() { Toggle(\"トグル１\", (b) =\u003e { Debug.Log(b); }, true); } ","引数#引数":" 引数 型 説明 text string トグルに添えるテキスト isOn bool 初期状態 toggle Action\u003cbool\u003e ON/OFFが切り替わる度に呼ばれるアクション "},"title":"Toggle"},"/ElinMod.Doc/docs/framework/refferences/topic/":{"data":{"":"２つのテキストを並べて表示する要素を生成します。 ステータス能力のように名前＋ベース値のように表示される箇所で使用されています。\nUIItem YKLayout.Topic(string text, string? value = null) UIItem YKLayout.TopicAttribute(string text, string? value = null) UIItem YKLayout.TopicDomain(string text, string? value = null) UIItem YKLayout.TopicLeft(string text, string? value = null) UIItem YKLayout.TopicPair(string text, string? value = null) ","サンプル#サンプル":" public override void OnLayout() { layout.Topic(\"テキスト１\", \"テキスト２\"); } ","引数#引数":" 引数 型 説明 text string 左側に表示するテキスト value string 右側に表示するテキスト "},"title":"Topic"},"/ElinMod.Doc/docs/framework/refferences/vertical/":{"data":{"":"要素を縦に積み上げる（ぶら下げる？）レイアウトを生成します。\nVerticalはYKLayoutを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nYKVertical YKLayout.Vertical() ","サンプル#サンプル":" public override void OnLayout() { var group = Vertical(); } ","引数#引数":" 引数 型 説明 なし "},"title":"Vertical"},"/ElinMod.Doc/docs/references/links/":{"data":{"":"","discordサーバー#Discordサーバー":"Elinに関するコミュニケーションはこの中で行われています。Mod製作者は#elin-modを覗いてみましょう。\nElona ","elin-modding-wiki#Elin Modding Wiki":"Elin Modの製作におけるHowToを掲載しているWiki。\nMod製作の環境構築や製作手法をステップごとに解説するArchiveをはじめ、アイテム追加などで必要となるSourceCard.xlsxの雛形のリンクなど重要な情報が多数集められています。\nElin Modding Wiki ","github#GitHub":"個人的にDiscordでお世話になっている方々のGitHubページです。各分野の専門性高いコードが拝見できます。\nkuronekotei yuzutuki yuu Drakeny ","ylvania#Ylvania":"Elinの作者noa氏のサイトです。ご挨拶をかねて一度は参拝しましょう。\nYlvania ","ylvapedia#Ylvapedia":"Elinの公式Wikiです。ここに書かれている情報は基礎知識としていつでも参照できるようにしておきましょう。\nただし更新遅れている情報もありますのでご注意を。可能なら更新へご協力よろしくお願いします。\nYlvapedia ","開発小部屋ylvania内#開発小部屋（Ylvania内）":"前提的、基本的な情報が掲載されています。情報収集はまずここから始めてみましょう。\n開発小部屋 "},"title":"リンク"},"/ElinMod.Doc/docs/references/prefab/":{"data":{"":"","リソースid#リソースID":"UnityのPrefabに格納されているデータ（いわゆるGameObject）のリソースIDで、 UnityEngine.Resources.Loadメソッドで呼び出せる文字列形式のキーを収集したリストです。\n（準備中） ⚠️ 実際にUnityEngine.Resources.Load(\"リソースID\")をコールすれば生成されますが、内容や用途を確認していないものも多いので、検証の際は壊れても良いセーブデータで使用してください。\nオブジェクトを生成するだけで、セーブデータに反映されるような処理はないと思いますが念のため。 "},"title":"内部リソース"}}