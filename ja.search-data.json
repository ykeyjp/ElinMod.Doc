{"/ElinMod.Doc/docs/":{"data":{"":" YK Framework データ解析 参考資料 "},"title":"Docs"},"/ElinMod.Doc/docs/framework/":{"data":{"":" ⚠️ YK Frameworkもまだまだ開発段階です。なるべく注意はしますがYK Frameworkの更新で製作したModが動作しなくなる可能性があります。ご注意ください。 ","yk-frameworkとは#YK Frameworkとは？":"ゲーム内のUI要素を再利用してMod独自のUI構築をサポートするライブラリです。\n公式にUI用のAPIが用意されているわけではないので、\n単純に目的に合ったUI要素を見つけて再利用するだけではレイアウトや表示の崩れを招きます。\nYK Frameworkではそうした調整処理を行い、汎用的に使えるパーツとして提供します。","マイルストーン#マイルストーン":"Elin（と言うよりUnity）のUIへの理解を深めるためのステップ案です。\n理解が進めば最終的にYK Frameworkを使用しなくても自身のModでUI構築が可能になることでしょう。\nStep 1 YK Frameworkの基本機能でUIの構築をお楽しみください。\nStep 2 YK Frameworkで生成されるUI要素のパラメーターを独自に弄ってみてください。\nStep 3 YK Frameworkに無い要素をゲーム内から見つけ、自身のModに組み込んでみてください。\nStep 4 自分なりのUtilityライブラリを作ってみてください。\nこの分野は研究的な側面が強いので、理解を深めるため車輪の再開発と厭わずチャレンジしてみてください。","使用に関しての注意事項#使用に関しての注意事項":"本ライブラリで使用される技術はゲーム解析のもと実現されており、ゲームのバージョンアップによる互換性の保証は一切ありません。\nある日突然表示が崩れたり、エラーを起こして処理が停止する可能性があります。\nこれらはライブラリに起因する問題ではありますが、ご利用は自己責任のもと行っていただき、代替処理の実装やワークショップのコメント欄で行われるフィードバックへの対応も各自ご対応ください。","開発コンセプト#開発コンセプト":"最小限の手間でそれなりのUIが作れる、をコンセプトに製作しています。\n凝った装飾や多機能な要素については提供の予定はありません。\nそういった高級なUIはご自身で研究し実現いただき、何らかの形でElin Mod界隈にフィードバックいただければ幸いです。"},"title":"YK Framework"},"/ElinMod.Doc/docs/framework/element/":{"data":{"":"とてもシンプルな例とともにUI要素の配置について説明します。 UIの構造はツリー状のような構造で表現されます。\n次の例では縦にテキストの「表示するテキスト１」「表示するテキスト２」と、ボタンの「ボタンのテキスト」が並ぶ構成です。\nvar window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertical(); layout.Text(\"表示するテキスト１\"); layout.Text(\"表示するテキスト２\"); layout.Button(\"ボタンのテキスト\", () =\u003e { Debug.Log(\"Pressed!\"); }); 構造を図で示すと次のようになります。\ngraph LR; Window--\u003eVertical; Vertical--\u003eText1; Vertical--\u003eText2; Vertical--\u003eButton;順序は宣言した順になるので、ボタンなどのインタラクティブな要素で、ほかの要素を参照する処理が必要な場合は注意が必要です。\n次の例のようにあらかじめ変数textを宣言して対応します。\nvar window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertical(); layout.Text(\"表示するテキスト１\"); UIHost\u003cUIText\u003e = text; layout.Button(\"ボタンのテキスト\", () =\u003e { /* 変数[text]をゴニョゴニョする */ }); text = layout.Text(\"表示するテキスト２\"); 例に挙げたVerticalやText意外にもたくさんのUI要素が用意されています。\nこれらはリファレンスで詳細を確認できます。"},"title":"UI要素の作成"},"/ElinMod.Doc/docs/framework/introduction/":{"data":{"":"","modのサブスクライブ#Modのサブスクライブ":"SteamワークショップからYK Frameworkを購読します。\nYK Framework on Steam ","実際にコードを書いてみる#実際にコードを書いてみる":"次のレイヤーの作成セクションで実際にUIを構築してみましょう。","開発ツールの参照設定#開発ツールの参照設定":"Unity,Visual Studio,Visual Studio Codeなどお使いの開発ツールの参照設定でYK FrameworkのDLL参照を追加してください。\nWindowの場合は下記のパスにダウンロードされています。\nC:\\Program Files (x86)\\Steam\\steamapps\\workshop\\content\\2135150\\3379866147\\YkeyFramework.dll "},"title":"導入"},"/ElinMod.Doc/docs/framework/layer/":{"data":{"":"まず始めにWindow（レイヤー）を定義します。\nWinddowに渡したいデータがあれば、IBuildUIArgsを継承した構造体にプロパティを定義しておきます。\n例えばキャラクターを参照するようなUIを作る場合にはCharaをプロパティに含めます。\nアイテムであればThingをプロパティに含めます。\nここでは一例ですので空の構造体とします。\npublic struct CustomArgs : IBuildUIArgs { } public class CustomWindow : BuildUI\u003cCustomArgs\u003e { public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); return this; } } BuildUIを継承したクラスでUIを構築する処理を記述します。Setupはその処理を記述するメソッドです。\n引数でIBuildUIArgsを経書した構造体が渡されますので、CharaやThingの参照はここから取得してください。\n上の例で唯一記述されているthis.WindowメソッドはUIのベースとなるウィンドウを生成する命令です。\n定義したウィンドウは次のコードで呼び出すことができます。\nYUI.LoadUI\u003cCustomWindow, CustomArgs\u003e(new CustomArgs { }); ここまでで定義された内容を箇条書きでまとめると次の通りです。\nCustomArgsと言う構造体を宣言。データは何も持たない。 CustomWindowと言うウィンドウを宣言。 YUI.LoadUIメソッドで定義したウィンドウの呼び出しを命令。 サイズ640x480のウィンドウが生成される（タイトルはとりあえずカスタムウィンドウ） 続いてUI要素の作成セクションでウィンドウに配置するパーツについて学んでみましょう。"},"title":"レイヤー作成"},"/ElinMod.Doc/docs/framework/refferences/":{"data":{"":"クラスライブラリとしてのリファレンスをまとめています。\n最新のバージョンに合わせて内容は更新しますが、更新が遅れる場合もあります。","その他#その他":" Spacerただの余白 ","ほかの要素を内包する要素#ほかの要素を内包する要素":" WindowUIの基礎となる要素 Vertical要素を縦に並べる Horizontal要素を横に並べる ScrollableスクロールできるVertical Grid折り返しが可能 ","インタラクティブな要素#インタラクティブな要素":" InputTextキーボードの入力を受け付ける Buttonシンプルなボタン ButtonRowボタンを並べる ToggleON/OFFのスイッチ DropDownいくつかの候補から選択 Sliderシンプルなスライダー SliderLabelテキスト付きのスライダー ","テキスト表示を行う要素#テキスト表示を行う要素":" Headerアイコンで装飾されたテキスト Topicラベルとデータを表示できる Text変哲もないテキスト "},"title":"リファレンス"},"/ElinMod.Doc/docs/framework/refferences/button/":{"data":{"":"Buttonはクリック可能な基本的なインタラクティブ要素です。\nUIHost\u003cUIButton\u003e LayoutBase.Button(string text, Action\u003cUIButton\u003e action, float width = 110f) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var btn = layout.Button(\"ボタン１\", (b) =\u003e { Debug.Log(\"Pressed!\"); }); return this; } ","引数#引数":" 引数 型 説明 text string ボタンに表示するテキスト action Action\u003cUIButton\u003e ボタンを押下した時のアクション width float ボタンの幅 "},"title":"Button"},"/ElinMod.Doc/docs/framework/refferences/buttonrow/":{"data":{"":"ButtonRowはボタンを並べるレイアウトを生成します。\nボタンはAddButtonで生成します。\nボタンのみ並べるレイアウトの場合に適します。\nLayoutButtons LayoutBase.ButtonRow() UIHost\u003cUIButton\u003e LayoutButtons.AddButton(string text, Action\u003cUIButton\u003e action, float width = 110f) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var buttons = layout.ButtonRow(); buttons.AddButton(\"ボタン１\", () =\u003e { Debug.Log(\"Pressed! (1)\"); }); buttons.AddButton(\"ボタン２\", () =\u003e { Debug.Log(\"Pressed! (2)\"); }); return this; } ","引数#引数":" 引数 型 説明 text string ボタンに表示するテキスト action Action\u003cUIButton\u003e ボタンを押下した時のアクション width float ボタンの幅 "},"title":"ButtonRow"},"/ElinMod.Doc/docs/framework/refferences/dropdown/":{"data":{"":"ドロップダウン（プルダウン）要素を生成します。\nUIHost\u003cUIDropdown\u003e LayoutBase.Dropdown() ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var dropdown = layout.Dropdown(); // 選択肢追加 dropdown.Host.AddOptions([\"選択肢１\", \"選択肢２\"]); // 選択肢クリア dropdown.Host.ClearOptions(); return this; } ","引数#引数":" 引数 型 説明 なし "},"title":"Dropdown"},"/ElinMod.Doc/docs/framework/refferences/header/":{"data":{"":"装飾されたテキストを生成します。\nUIHost\u003cUIItem\u003e LayoutBase.Header(string text, Sprite? sprite = null, string headerType = \"Note\", float width = 210f) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var header = layout.Header(\"ヘッダー１\"); return this; } ","引数#引数":" 引数 型 説明 text string テキスト sprite Sprite テキストの頭に付けるアイコン headerType string Note、Card、Topicのいずれか width float 横幅 "},"title":"Header"},"/ElinMod.Doc/docs/framework/refferences/inputtext/":{"data":{"":"キーボードの入力を受け付けるインタラクティブ要素を生成します。\nUIHost\u003cUIInputText\u003e LayoutBase.InputText(string? value = null, Action\u003cint\u003e? onchange = null, float width = 90f) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); layout.InputText(\"test\", (input) =\u003e { var txt = input.Text; // string var num = input.Num; // int }); return this; } ","引数#引数":" 引数 型 説明 value string 初期データ onchange Action\u003cUIInputText\u003e 値が変更される度に呼び出されるアクション width float 横幅 "},"title":"InputText"},"/ElinMod.Doc/docs/framework/refferences/layoutg/":{"data":{"":" LayoutG LayoutBase.Grid(float? size = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var grid = layout.Grid(); return this; } ","引数#引数":" 引数 型 説明 size float 固定する場合のサイズ（幅と高さのどちらが対象かは親要素次第） "},"title":"Grid"},"/ElinMod.Doc/docs/framework/refferences/layouth/":{"data":{"":"左から右に要素を並べるレイアウトを生成します。 LayoutVはLayoutBaseを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nLayoutH Window.Horizontal() LayoutH LayoutBase.Horizontal(float? size = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var horizontal = window.Horizontal(); return this; } ","引数#引数":" 引数 型 説明 size float 固定する場合のサイズ（幅と高さのどちらが対象かは親要素次第） "},"title":"Horizontal"},"/ElinMod.Doc/docs/framework/refferences/layouts/":{"data":{"":"LayoutVと同様に要素を縦に積み上げる（ぶら下げる？）レイアウトを生成します。\nLayoutSはスクロール可能な要素で、高さが上限に達するとスクロールバーが表示され、マウスホイールでスクロールが可能になります。\nLayoutSはLayoutBaseを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nLayoutBase Window.Scrollable() LayoutS LayoutBase.Scroll(float? height = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var scrollable = window.Scrollable(); return this; } ","引数#引数":" 引数 型 説明 size float 固定する場合のサイズ（幅と高さのどちらが対象かは親要素次第） "},"title":"Scrollable"},"/ElinMod.Doc/docs/framework/refferences/layoutv/":{"data":{"":"要素を縦に積み上げる（ぶら下げる？）レイアウトを生成します。\nLayoutVはLayoutBaseを継承しているので、ほかの要素を子要素として生成できます。\n生成した順番に並ぶので処理の順序に注意してください。\nLayoutV Window.Vertical() LayoutBase Window.Tab(string title) LayoutV LayoutBase.Vertical(float? size = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var vertical = window.Vertical(); return this; } Window.Tab()メソッドはウィンドウにタブを付けてページ切り替え機能を提供します。\n返り値はLayoutVなので標準は縦に積み上げるレイアウトになります。\npublic override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var tab1 = window.Tab(\"タブ１\"); var tab2 = window.Tab(\"タブ２\"); return this; } ","引数#引数":" 引数 型 説明 title string タブのタイトル size float 固定する場合のサイズ（幅と高さのどちらが対象かは親要素次第） "},"title":"Vertical"},"/ElinMod.Doc/docs/framework/refferences/slider/":{"data":{"":"Dropdownの亜種でスライダー表現で選択を行うインタラクティブ要素を生成します。\nUIHost\u003cUISlider\u003e LayoutBase.Slider\u003cTValue\u003e(int index, IList\u003cTValue\u003e list, Action\u003cint, TValue\u003e onChange, Func\u003cTValue, string\u003e? getInfo = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var slider = layout.Slider(0, new List\u003cstring\u003e { \"選択肢１\", \"選択肢２\", \"選択肢３\" }, (idx, str) =\u003e { Debug.Log(str); }, (str) =\u003e str); return this; } ","引数#引数":" 引数 型 説明 index int 初期インデックス list IList\u003cTValue\u003e 選択肢のリスト onChange Action\u003cint, TValue\u003e 選択が変化する度に呼ばれるアクション getInfo Func\u003cTValue, string\u003e リストのデータから表示するテキストを返す関数 "},"title":"Slider"},"/ElinMod.Doc/docs/framework/refferences/sliderlabel/":{"data":{"":"Sliderにラベルを付けるショートハンド。\n返る要素はLayoutHでTextとSliderを並べています。\nUIHost\u003cLayoutH\u003e LayoutBase.SliderLabel\u003cTValue\u003e(string label, int index, IList\u003cTValue\u003e list, Action\u003cint, TValue\u003e onChange, Func\u003cTValue, string\u003e? getInfo = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var slider = layout.SliderLabel(\"ラベル１\", 0, new List\u003cstring\u003e { \"選択肢１\", \"選択肢２\", \"選択肢３\" }, (idx, str) =\u003e { Debug.Log(str); }, (str) =\u003e str); return this; } ","引数#引数":" 引数 型 説明 label string ラベルテキスト index int 初期インデックス list IList\u003cTValue\u003e 選択肢のリスト onChange Action\u003cint, TValue\u003e 選択が変化する度に呼ばれるアクション getInfo Func\u003cTValue, string\u003e リストのデータから表示するテキストを返す関数 "},"title":"SliderLabel"},"/ElinMod.Doc/docs/framework/refferences/spacer/":{"data":{"":"何も表示されない要素を生成します。\n要素間の余白作りに使用します。\nUIHost\u003cLayoutElement\u003e LayoutBase.Spacer(int sizeY = 0, int sizeX = 1) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var space = layout.Spacer(50); return this; } ","引数#引数":" 引数 型 説明 sizeY int 縦方向のサイズ sizeX int 横方向のサイズ "},"title":"Spacer"},"/ElinMod.Doc/docs/framework/refferences/text/":{"data":{"":"装飾されていないテキストを生成します。\nUIHost\u003cUIText\u003e LayoutBase.Text(string text, Action\u003cUIText\u003e? modify = null, float? width = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var text = layout.Text(\"テキスト１\"); return this; } ","引数#引数":" 引数 型 説明 text string テキスト modify Action\u003cUIText\u003e UITextの初期化完了前に実行するアクション width float 横幅 modifyパラメーターはSkinTypeやFontColorの設定など、要素の初期化が完了する前（ApplySkinメソッドが実行される前）に行いたい処理がある場合に使用します。"},"title":"Text"},"/ElinMod.Doc/docs/framework/refferences/toggle/":{"data":{"":"ON/OFFを切り替えるインタラクティブ要素を生成します。\nUIHost\u003cUIButton\u003e LayoutBase.Toggle(string text, Action\u003cbool\u003e toggle, bool isOn = false) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var toggle = layout.Toggle(\"トグル１\", (b) =\u003e { Debug.Log(b); }, true); return this; } ","引数#引数":" 引数 型 説明 text string トグルに添えるテキスト toggle Action\u003cbool\u003e ON/OFFが切り替わる度に呼ばれるアクション isOn bool 初期状態 "},"title":"Toggle"},"/ElinMod.Doc/docs/framework/refferences/topic/":{"data":{"":"２つのテキストを並べて表示する要素を生成します。 ステータス能力のように名前＋ベース値のように表示される個所で使用されています。\nUIHost\u003cUIItem\u003e LayoutBase.Topic(string text, string? value = null) ","サンプル#サンプル":" public override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); var layout = window.Vertial(); var topic = layout.Topic(\"テキスト１\", \"テキスト２\"); return this; } ","引数#引数":" 引数 型 説明 text string 左側に表示するテキスト value string 右側に表示するテキスト "},"title":"Topic"},"/ElinMod.Doc/docs/framework/refferences/window/":{"data":{"":"LayerとWindowはElinのクラスです。YK FrameworkではLayerからWindowを生成する拡張メソッドを定義しています。\nWindow Layer.Window(int width, int height, string caption) Window Layer.Window(Window.Setting setting) ","サンプル#サンプル":"YK FrameworkのBuildUIクラスはLayerを継承しているので、this.Window()でWindowを生成可能です。\npublic override BuildUI\u003cCustomArgs\u003e Setup(CustomArgs args) { var window = this.Window(640, 480, \"カスタムウィンドウ\"); return this; } ","引数#引数":" 引数 型 説明 width int ウィンドウの幅 height int ウィンドウの高さ caption string ウィンドウのキャプション（タイトル） setting Window.Setting Window.Setting構造体を使ってWindowを生成 "},"title":"Window"},"/ElinMod.Doc/docs/references/links/":{"data":{"":"","discordサーバー#Discordサーバー":"Elinに関するコミュニケーションはこの中で行われています。Mod製作者は#elin-modを覗いてみましょう。\nElona ","elin-modding-wiki#Elin Modding Wiki":"Elin Modの製作におけるHowToを掲載しているWiki。\nMod製作の環境構築や製作手法をステップごとに解説するArchiveをはじめ、アイテム追加などで必要となるSourceCard.xlsxの雛形のリンクなど重要な情報が多数集められています。\nElin Modding Wiki ","github#GitHub":"個人的にDiscordでお世話になっている方々のGitHubページです。各分野の専門性高いコードが拝見できます。\nkuronekotei yuzutuki Drakeny ","ylvania#Ylvania":"Elinの作者noa氏のサイトです。ご挨拶をかねて一度は参拝しましょう。\nYlvania ","ylvapedia#Ylvapedia":"Elinの公式Wikiです。ここに書かれている情報は基礎知識としていつでも参照できるようにしておきましょう。\nただし更新遅れている情報もありますのでご注意を。可能なら更新へご協力よろしくお願いします。\nYlvapedia ","開発小部屋ylvania内#開発小部屋（Ylvania内）":"前提的、基本的な情報が掲載されています。情報収集はまずここから始めてみましょう。\n開発小部屋 "},"title":"リンク"},"/ElinMod.Doc/docs/references/prefab/":{"data":{"":"","リソースid#リソースID":"UnityのPrefabに格納されているデータ（いわゆるGameObject）のリソースIDで、 UnityEngine.Resources.Loadメソッドで呼び出せる文字列形式のキーを収集したリストです。\n（準備中） ⚠️ 実際にUnityEngine.Resources.Load(\"リソースID\")をコールすれば生成されますが、内容や用途を確認していないものも多いので、検証の際は壊れても良いセーブデータで使用してください。\nオブジェクトを生成するだけで、セーブデータに反映されるような処理はないと思いますが念のため。 "},"title":"内部リソース"}}